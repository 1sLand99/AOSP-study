diff --git a/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java b/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java
index 60511a9c2d..bd7881324a 100644
--- a/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java
+++ b/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java
@@ -131,6 +131,7 @@ public class BaseDexClassLoader extends ClassLoader {
         this.sharedLibraryLoaders = sharedLibraryLoaders == null
                 ? null
                 : Arrays.copyOf(sharedLibraryLoaders, sharedLibraryLoaders.length);
+                //关键 DexPathList
         this.pathList = new DexPathList(this, dexPath, librarySearchPath, null, isTrusted);
 
         // Run background verification after having set 'pathList'.
@@ -202,6 +203,7 @@ public class BaseDexClassLoader extends ClassLoader {
     @Override
     protected Class<?> findClass(String name) throws ClassNotFoundException {
         // First, check whether the class is present in our shared libraries.
+        //检查该类是否在我们的共享库中
         if (sharedLibraryLoaders != null) {
             for (ClassLoader loader : sharedLibraryLoaders) {
                 try {
@@ -213,6 +215,7 @@ public class BaseDexClassLoader extends ClassLoader {
         // Check whether the class in question is present in the dexPath that
         // this classloader operates on.
         List<Throwable> suppressedExceptions = new ArrayList<Throwable>();
+        //在pathList中寻找name对应的类，pathList关键成员pathList 类型为DexPathList。该变量储存了路径信息，由DexPathList findClass来完成相关工作
         Class c = pathList.findClass(name, suppressedExceptions);
         if (c == null) {
             ClassNotFoundException cnfe = new ClassNotFoundException(
diff --git a/dalvik/src/main/java/dalvik/system/DexFile.java b/dalvik/src/main/java/dalvik/system/DexFile.java
index f8e7f42edc..4d8e2c9e8c 100644
--- a/dalvik/src/main/java/dalvik/system/DexFile.java
+++ b/dalvik/src/main/java/dalvik/system/DexFile.java
@@ -291,10 +291,12 @@ public final class DexFile {
         return defineClass(name, loader, mCookie, this, suppressed);
     }
 
+    //定义类
     private static Class defineClass(String name, ClassLoader loader, Object cookie,
                                      DexFile dexFile, List<Throwable> suppressed) {
         Class result = null;
         try {
+            //进入了art native层
             result = defineClassNative(name, loader, cookie, dexFile);
         } catch (NoClassDefFoundError e) {
             if (suppressed != null) {
diff --git a/dalvik/src/main/java/dalvik/system/DexPathList.java b/dalvik/src/main/java/dalvik/system/DexPathList.java
index acf5e6635e..a143e21b95 100644
--- a/dalvik/src/main/java/dalvik/system/DexPathList.java
+++ b/dalvik/src/main/java/dalvik/system/DexPathList.java
@@ -134,6 +134,13 @@ public final class DexPathList {
         this(definingContext, dexPath, librarySearchPath, optimizedDirectory, false);
     }
 
+    /**
+     * definingContext 当前应用的类加载器
+     * dexPath dex文件的路径
+     * librarySearchPath so的路径
+     * optimizedDirectory null
+     * isTrysted false 是否受信任
+     */
     DexPathList(ClassLoader definingContext, String dexPath,
             String librarySearchPath, File optimizedDirectory, boolean isTrusted) {
         if (definingContext == null) {
@@ -163,6 +170,13 @@ public final class DexPathList {
 
         ArrayList<IOException> suppressedExceptions = new ArrayList<IOException>();
         // save dexPath for BaseDexClassLoader
+        /** 获取一个包含dex文件的元素集合，保存到一个数组元素中
+         * splitDexPath(dexPath) ListArray
+         * optimizedDirectory 为null
+         * suppressdExceptions IOException Array
+         * definingContext 当前应用的类加载器
+         * isTrysted false
+         */
         this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,
                                            suppressedExceptions, definingContext, isTrusted);
 
@@ -176,9 +190,12 @@ public final class DexPathList {
         //      also known as java.library.path
         //
         // This order was reversed prior to Gingerbread; see http://b/2933456.
+        //app目录的native库
         this.nativeLibraryDirectories = splitPaths(librarySearchPath, false);
+        //系统目录的native库
         this.systemNativeLibraryDirectories =
                 splitPaths(System.getProperty("java.library.path"), true);
+        //记住所有的native库
         this.nativeLibraryPathElements = makePathElements(getAllNativeLibraryDirectories());
 
         if (suppressedExceptions.size() > 0) {
@@ -365,27 +382,41 @@ public final class DexPathList {
     }
 
 
+    /** 为本地库搜索路径生成一个directory/zip path元素数组
+     * files ListArray
+     * optimizedDirectory null
+     * superessedExceptions IOException Array
+     * loader 当前应用的类加载器
+     * isTrusted false
+     */
     private static Element[] makeDexElements(List<File> files, File optimizedDirectory,
             List<IOException> suppressedExceptions, ClassLoader loader, boolean isTrusted) {
-      Element[] elements = new Element[files.size()];
+      Element[] elements = new Element[files.size()]; //对象数组
       int elementsPos = 0;
       /*
        * Open all files and load the (direct or contained) dex files up front.
        */
       for (File file : files) {
-          if (file.isDirectory()) {
+        //System.logW("Jiang DexFilePath:"+file.getPath());
+          /** 这里启动了一个via浏览器
+           *  Jiang DexFilePath:/data/app/~~iATc3PGdLu4WINQtEQ2ZIg==/mark.via-kSj_VFFlfCo-atwnZ01sXw==/base.apk
+           *  Jiang DexFilePath:/product/app/webview/webview.apk
+           */
+          if (file.isDirectory()) { //如果是目录
               // We support directories for looking up resources. Looking up resources in
               // directories is useful for running libcore tests.
               elements[elementsPos++] = new Element(file);
-          } else if (file.isFile()) {
+          } else if (file.isFile()) { //如果是文件
               String name = file.getName();
 
               DexFile dex = null;
+              //判断文件是否是以.dex结尾
               if (name.endsWith(DEX_SUFFIX)) {
                   // Raw dex file (not inside a zip/jar).
                   try {
+                    //尝试加载dex文件，而且会吧优化后的dex文件缓存到对应的目录中
                       dex = loadDexFile(file, optimizedDirectory, loader, elements);
-                      if (dex != null) {
+                      if (dex != null) { 
                           elements[elementsPos++] = new Element(dex, null);
                       }
                   } catch (IOException suppressed) {
@@ -407,13 +438,13 @@ public final class DexPathList {
                   }
 
                   if (dex == null) {
-                      elements[elementsPos++] = new Element(file);
+                      elements[elementsPos++] = new Element(file);//生成file对应的Element对象
                   } else {
-                      elements[elementsPos++] = new Element(dex, file);
+                      elements[elementsPos++] = new Element(dex, file);//生成dexFile对应的Element对象
                   }
               }
-              if (dex != null && isTrusted) {
-                dex.setTrusted();
+              if (dex != null && isTrusted) {//如果dex对象不为空的且是允许信任状态
+                dex.setTrusted(); //将此dex对象设置为信任，它可以访问平台的隐藏apu
               }
           } else {
               System.logW("ClassLoader referenced unknown path: " + file);
@@ -435,6 +466,7 @@ public final class DexPathList {
                                        Element[] elements)
             throws IOException {
         if (optimizedDirectory == null) {
+            //创建DexFile对象
             return new DexFile(file, loader, elements);
         } else {
             String optimizedPath = optimizedPathFor(file, optimizedDirectory);
@@ -527,8 +559,19 @@ public final class DexPathList {
      * @return the named class or {@code null} if the class is not
      * found in any of the dex files
      */
+    /**
+     * 一个BaseDexClassLoader对象和一个DexPathList对象互相关联
+     * DexPathList可以加载一个或多个dex文件信息，这说明BaseDexClassLoader可以从DexPathList指定的dex文件中去搜索加载目标的类
+     */
     public Class<?> findClass(String name, List<Throwable> suppressed) {
+        //dexElements：描述definingContext ClassLoader所加载的dex文件元素数组
         for (Element element : dexElements) {
+            //dex Elements在加载类的时候已经被初始化过了
+            /**
+             * name：类名
+             * definingContext：加载类的上下文 指向DexPathList对象
+             * suppressed：异常列表
+             */
             Class<?> clazz = element.findClass(name, definingContext, suppressed);
             if (clazz != null) {
                 return clazz;
diff --git a/ojluni/src/main/java/java/lang/ClassLoader.java b/ojluni/src/main/java/java/lang/ClassLoader.java
index 0a8b08ad8f..ba28f55c0a 100644
--- a/ojluni/src/main/java/java/lang/ClassLoader.java
+++ b/ojluni/src/main/java/java/lang/ClassLoader.java
@@ -356,27 +356,30 @@ public abstract class ClassLoader {
     // <p> Unless overridden, this method synchronizes on the result of
     // {@link #getClassLoadingLock <tt>getClassLoadingLock</tt>} method
     // during the entire class loading process.
+    //双亲委派模型来搜索类
+    //这个classloader是受保护的 外界不能访问
     protected Class<?> loadClass(String name, boolean resolve)
         throws ClassNotFoundException
     {
             // First, check if the class has already been loaded
+            //先查看虚拟机中是否已经加载了这个类
             Class<?> c = findLoadedClass(name);
-            if (c == null) {
+            if (c == null) { //如果没有加载 就先尝试加载
                 try {
                     if (parent != null) {
-                        c = parent.loadClass(name, false);
+                        c = parent.loadClass(name, false); //如果还有父类 就是用父类去调用
                     } else {
-                        c = findBootstrapClassOrNull(name);
+                        c = findBootstrapClassOrNull(name); //如果没有父类 尝试使用BootstrapClassLoader加载
                     }
                 } catch (ClassNotFoundException e) {
                     // ClassNotFoundException thrown if class not found
                     // from the non-null parent class loader
                 }
 
-                if (c == null) {
+                if (c == null) { //如果委托者加载不成功 则尝试自己加载
                     // If still not found, then invoke findClass in order
                     // to find the class.
-                    c = findClass(name);
+                    c = findClass(name); //最终调用BaseDexClassLoader.findClass ClassLoader只是抽象类，被BaseDexClassLoader继承重写
                 }
             }
             return c;
